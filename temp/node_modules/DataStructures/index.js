"use strict";
var Data_String = require("Data.String");
var Data_Array = require("Data.Array");
var T0 = {
    ctor: "DataStructures.T0", 
    values: [  ]
};
var T1 = {
    ctor: "DataStructures.T1", 
    values: [  ]
};
var T2 = {
    ctor: "DataStructures.T2", 
    values: [  ]
};
var T3 = {
    ctor: "DataStructures.T3", 
    values: [  ]
};
var T4 = {
    ctor: "DataStructures.T4", 
    values: [  ]
};
var T5 = {
    ctor: "DataStructures.T5", 
    values: [  ]
};
var T6 = {
    ctor: "DataStructures.T6", 
    values: [  ]
};
var Tile = function (value0) {
    return function (value1) {
        return {
            ctor: "DataStructures.Tile", 
            values: [ value0, value1 ]
        };
    };
};
var Query = function (value0) {
    return {
        ctor: "DataStructures.Query", 
        values: [ value0 ]
    };
};
var Request = function (value0) {
    return {
        ctor: "DataStructures.Request", 
        values: [ value0 ]
    };
};
var PersonalInfo = function (value0) {
    return {
        ctor: "DataStructures.PersonalInfo", 
        values: [ value0 ]
    };
};
var Board = function (value0) {
    return {
        ctor: "DataStructures.Board", 
        values: [ value0 ]
    };
};
var valFromString = function (_1) {
    if (_1 === "0") {
        return T0;
    };
    if (_1 === "1") {
        return T1;
    };
    if (_1 === "2") {
        return T2;
    };
    if (_1 === "3") {
        return T3;
    };
    if (_1 === "4") {
        return T4;
    };
    if (_1 === "5") {
        return T5;
    };
    if (_1 === "6") {
        return T6;
    };
    throw "Failed pattern match";
};
var tileFromString = function (s) {
    return Tile(valFromString(Data_String.charAt(0)(s)))(valFromString(Data_String.charAt(1)(s)));
};
var boardLength = function (_1) {
    return Data_Array.length(_1.values[0]);
};
var board = function (tiles) {
    return Data_Array.map(tileFromString)(tiles);
};
module.exports = {
    Request: Request, 
    Query: Query, 
    Board: Board, 
    Tile: Tile, 
    T0: T0, 
    T1: T1, 
    T2: T2, 
    T3: T3, 
    T4: T4, 
    T5: T5, 
    T6: T6, 
    PersonalInfo: PersonalInfo, 
    boardLength: boardLength, 
    board: board, 
    tileFromString: tileFromString, 
    valFromString: valFromString
};